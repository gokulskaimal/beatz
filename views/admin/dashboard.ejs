<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Beatz Admin Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            neon: '#ADFF2F',
            background: '#000000',
            surface: '#111111',
            'surface-light': '#1A1A1A',
          },
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
        },
      },
    };
  </script>
  <style>
    .gradient-card {
      background: linear-gradient(145deg, #111111 0%, #1a1a1a 100%);
    }
    .chart-grid {
      stroke: rgba(255, 255, 255, 0.05);
    }
    .trend-up {
      color: #4ADE80;
    }
    .trend-down {
      color: #FB7185;
    }
  </style>
</head>
<body class="min-h-screen bg-background text-white font-sans">
  <div class="flex h-screen">
    <!-- Sidebar -->
    <div class="w-64 bg-[#111] ">
      <%- include('../partials/adminHeader') %>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-8 overflow-y-auto">
      <!-- Sales Summary Section -->
      <div class="mb-8">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-xl text-yellow-500 font-bold">Dashboard</h2>
          <div class="flex items-center gap-4">
            <select id="dashboardFilter" class="bg-surface text-white px-4 py-2 rounded-md">
              <option value="daily" <%= filter === 'daily' ? 'selected' : '' %>>Daily</option>
              <option value="weekly" <%= filter === 'weekly' ? 'selected' : '' %>>Weekly</option>
              <option value="monthly" <%= filter === 'monthly' ? 'selected' : '' %>>Monthly</option>
              <option value="yearly" <%= filter === 'yearly' ? 'selected' : '' %>>Yearly</option>
            </select>
          </div>
        </div>

        <!-- Metric Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div class="gradient-card p-6 rounded-xl">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-neon">Total Users</h3>
              <div class="p-2 bg-surface-light rounded-lg">
                <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path d="M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7Z" stroke-width="2"/>
                  <path d="M12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z" stroke-width="2"/>
                </svg>
              </div>
            </div>
            <div class="flex items-end justify-between">
              <div>
                <h4 class="text-2xl font-bold" id="totalUsers"><%= dashboardData.totalUsers %></h4>
              </div>
            </div>
          </div>

          <div class="gradient-card p-6 rounded-xl">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-neon">Total Order</h3>
              <div class="p-2 bg-surface-light rounded-lg">
                <svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path d="M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H17C18.1046 21 19 20.1046 19 19V7C19 5.89543 18.1046 5 17 5H15M9 5C9 6.10457 9.89543 7 11 7H13C14.1046 7 15 6.10457 15 5M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5" stroke-width="2"/>
                </svg>
              </div>
            </div>
            <div class="flex items-end justify-between">
              <div>
                <h4 class="text-2xl font-bold" id="totalOrders"><%= dashboardData.totalOrders %></h4>
              </div>
            </div>
          </div>

          <div class="gradient-card p-6 rounded-xl">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-neon">Total Sales</h3>
              <div class="p-2 bg-surface-light rounded-lg">
                <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path d="M12 8C12 10.2091 10.2091 12 8 12C5.79086 12 4 10.2091 4 8C4 5.79086 5.79086 4 8 4C10.2091 4 12 5.79086 12 8Z" stroke-width="2"/>
                  <path d="M12 8H20M20 8L16 4M20 8L16 12" stroke-width="2"/>
                </svg>
              </div>
            </div>
            <div class="flex items-end justify-between">
              <div>
                <h4 class="text-2xl font-bold" id="totalSales">â‚¹<%= dashboardData.totalSales.toFixed(2) %></h4>
              </div>
            </div>
          </div>

          <div class="gradient-card p-6 rounded-xl">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-neon">Total Customers</h3>
              <div class="p-2 bg-surface-light rounded-lg">
                <svg class="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path d="M17 20H22V18C22 16.3431 20.6569 15 19 15C18.0444 15 17.1931 15.4468 16.6438 16.1429M17 20H7M17 20V18C17 17.3438 16.8736 16.717 16.6438 16.1429M7 20H2V18C2 16.3431 3.34315 15 5 15C5.95561 15 6.80686 15.4468 7.35625 16.1429M7 20V18C7 17.3438 7.12642 16.717 7.35625 16.1429M7.35625 16.1429C8.0935 14.301 9.89482 13 12 13C14.1052 13 15.9065 14.301 16.6438 16.1429M15 7C15 8.65685 13.6569 10 12 10C10.3431 10 9 8.65685 9 7C9 5.34315 10.3431 4 12 4C13.6569 4 15 5.34315 15 7ZM21 10C21 11.1046 20.1046 12 19 12C17.8954 12 17 11.1046 17 10C17 8.89543 17.8954 8 19 8C20.1046 8 21 8.89543 21 10ZM7 10C7 11.1046 6.10457 12 5 12C3.89543 12 3 11.1046 3 10C3 8.89543 3.89543 8 5 8C6.10457 8 7 8.89543 7 10Z" stroke-width="2"/>
                </svg>
              </div>
            </div>
            <div class="flex items-end justify-between">
              <div>
                <h4 class="text-2xl font-bold" id="totalCustomers"><%= dashboardData.totalCustomers %></h4>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Orders Chart -->
      <div class="gradient-card p-6 rounded-xl mb-8">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-xl text-yellow-500 text font-bold">Orders Update</h2>
        </div>
        <div class="relative h-80">
          <canvas id="ordersChart"></canvas>
        </div>
      </div>

      <!-- Tab Navigation -->
      <div class="mb-8">
        <div class="flex space-x-4 border-b border-gray-700">
          <button class="tab-button py-2 px-4 text-neon border-b-2 border-neon" data-tab="products">Products</button>
          <button class="tab-button py-2 px-4 text-gray-400 hover:text-neon" data-tab="categories">Categories</button>
          <button class="tab-button py-2 px-4 text-gray-400 hover:text-neon" data-tab="brands">Brands</button>
        </div>
      </div>

      <!-- Tab Content -->
      <div id="tabContent" class="mb-8">
        <!-- Products Tab (default visible) -->
        <div id="productsTab" class="tab-content">
          <div class="gradient-card p-6 rounded-xl mb-8">
            <h2 class="text-xl font-bold text-yellow-500 mb-4">Best Selling Products (Top 10)</h2>
            <div id="bestSellingProducts" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              <% bestSellingProducts.forEach(product => { %>
                <div class="bg-surface p-4 rounded-lg shadow transition-transform duration-200 hover:scale-105">
                  <img src="<%= product.image %>" alt="<%= product.product_name %>" class="w-full h-32 object-cover rounded-md mb-2">
                  <h3 class="font-semibold text-neon mb-2"><%= product.product_name %></h3>
                  <p class="text-sm">Sales: <%= product.sales %></p>
                </div>
              <% }); %>
            </div>
          </div>
        </div>

        <!-- Categories Tab (initially hidden) -->
        <div id="categoriesTab" class="tab-content hidden">
          <div class="gradient-card p-6 rounded-xl">
            <h2 class="text-xl text-yellow-500 font-bold mb-4">Top Selling Categories</h2>
            <div id="bestSellingCategories">
              <ul class="space-y-2">
                <% bestSellingCategories.forEach(category => { %>
                  <li class="flex justify-between items-center">
                    <span class="text-neon"><%= category.name %></span>
                    <span class="bg-surface px-2 py-1 rounded"><%= category.sales %></span>
                  </li>
                <% }); %>
              </ul>
            </div>
          </div>
        </div>

        <!-- Brands Tab (initially hidden) -->
        <div id="brandsTab" class="tab-content hidden">
          <div class="gradient-card p-6 rounded-xl">
            <h2 class="text-xl text-yellow-500 font-bold mb-4">Top Selling Brands</h2>
            <div id="bestSellingBrands">
              <ul class="space-y-2">
                <% bestSellingBrands.forEach(brand => { %>
                  <li class="flex justify-between items-center">
                    <span class="text-neon"><%= brand.name %></span>
                    <span class="bg-surface px-2 py-1 rounded"><%= brand.sales %></span>
                  </li>
                <% }); %>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const qs = (selector) => document.querySelector(selector);
    const qsa = (selector) => document.querySelectorAll(selector);
    let ordersChart;

    function renderOrdersChart(data, filter) {
      const ctx = qs('#ordersChart').getContext('2d');
      
      if (ordersChart) {
        ordersChart.destroy();
      }

      const gradient = ctx.createLinearGradient(0, 0, 0, 400);
      gradient.addColorStop(0, 'rgba(173, 255, 47, 0.4)');
      gradient.addColorStop(1, 'rgba(173, 255, 47, 0)');

      const { labels, values } = processChartData(data, filter);

      ordersChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Orders',
            data: values,
            borderColor: '#ADFF2F',
            backgroundColor: gradient,
            tension: 0.4,
            fill: true,
            pointBackgroundColor: '#ADFF2F',
            pointBorderColor: '#000000',
            pointBorderWidth: 2,
            pointRadius: 6,
            pointHoverRadius: 8,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(255, 255, 255, 0.05)',
                drawBorder: false,
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)',
                callback: function(value) {
                  return value;
                }
              }
            },
            x: {
              grid: {
                display: false
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            }
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: '#1A1A1A',
              titleColor: '#FFFFFF',
              bodyColor: '#FFFFFF',
              borderColor: '#333333',
              borderWidth: 1,
              padding: 12,
              displayColors: false,
              callbacks: {
                label: function(context) {
                  return context.parsed.y + ' orders';
                }
              }
            }
          },
          interaction: {
            intersect: false,
            mode: 'index'
          }
        }
      });
    }

    function processChartData(data, filter) {
      let labels, values;

      switch (filter) {
        case 'weekly':
          ({ labels, values } = processWeeklyData(data));
          break;
        case 'monthly':
          ({ labels, values } = processMonthlyData(data));
          break;
        case 'yearly':
          ({ labels, values } = processYearlyData(data));
          break;
        default:
          labels = data.map(item => item.date);
          values = data.map(item => item.orders);
      }

      return { labels, values };
    }

    function processWeeklyData(data) {
      const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      const labels = weekDays;
      const values = new Array(7).fill(0);

      data.forEach(item => {
        const date = new Date(item.date);
        const dayIndex = date.getDay();
        values[dayIndex] += item.orders;
      });

      return { labels, values };
    }

    function processMonthlyData(data) {
      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      const labels = monthNames;
      const values = new Array(12).fill(0);

      data.forEach(item => {
        const [year, month] = item.date.split('-');
        const monthIndex = parseInt(month) - 1;
        values[monthIndex] += item.orders;
      });

      return { labels, values };
    }

    function processYearlyData(data) {
      const yearlyData = {};

      data.forEach(item => {
        const [year] = item.date.split('-');
        if (!yearlyData[year]) {
          yearlyData[year] = 0;
        }
        yearlyData[year] += item.orders;
      });

      const labels = Object.keys(yearlyData).sort();
      const values = labels.map(year => yearlyData[year]);

      return { labels, values };
    }

    document.addEventListener('DOMContentLoaded', () => {
      const currentFilter = '<%= filter %>';
      renderOrdersChart(<%- JSON.stringify(salesData) %>, currentFilter);

      qs('#dashboardFilter').addEventListener('change', function() {
        window.location.href = `/admin/dashboard?filter=${this.value}`;
      });

      qsa('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
          const tabName = button.getAttribute('data-tab');
          switchTab(tabName);
        });
      });
    });

    function switchTab(tabName) {
      qsa('.tab-content').forEach(content => content.classList.add('hidden'));
      qs(`#${tabName}Tab`).classList.remove('hidden');
      
      qsa('.tab-button').forEach(button => {
        if (button.getAttribute('data-tab') === tabName) {
          button.classList.add('text-neon', 'border-b-2', 'border-neon');
          button.classList.remove('text-gray-400');
        } else {
          button.classList.remove('text-neon', 'border-b-2', 'border-neon');
          button.classList.add('text-gray-400');
        }
      });
    }
  </script>
</body>
</html>

