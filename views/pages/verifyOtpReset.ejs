<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verify OTP - Beatz</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
      background-color: #000;
    }
  </style>
</head>
<body class="min-h-screen bg-black text-white">
  <%- include('../partials/header') %>
  <main class="flex items-center justify-center min-h-[calc(100vh-64px)]">
    <div class="w-full max-w-md mx-auto p-6">
      <div class="bg-gray-900 backdrop-blur-sm p-8 rounded-lg">
        <h1 class="text-center text-2xl font-bold text-[#f97316] mb-8">Enter your OTP</h1>
        <form id="otpForm" action="/auth/verify-otp-reset" method="POST" class="space-y-6">
          <input type="text" id="otp" name="otp" required maxlength="6"
            class="w-full bg-zinc-800/50 border border-zinc-700 text-white px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#f97316]"
            placeholder="Enter your OTP">
          <button type="submit"
            class="w-full py-3 bg-[#f97316] text-white font-medium rounded-lg hover:bg-[#ea580c] transition-colors">
            VERIFY OTP
          </button>
        </form>
        <div class="mt-6 text-center">
          <p class="text-sm text-zinc-400">
            Didn't get the OTP? 
            <button id="resend-btn" class="text-[#f97316] hover:text-[#ea580c] disabled:text-zinc-600" disabled>
              Resend
            </button>
          </p>
          <span id="countdown" class="text-sm text-red-500 mt-2 block"></span>
        </div>
      </div>
    </div>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const otpForm = document.getElementById('otpForm');
      const resendButton = document.getElementById('resend-btn');
      const countdownElement = document.getElementById('countdown');

      otpForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(otpForm);

        try {
          const response = await fetch(otpForm.action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
          });

          const data = await response.json();

          if (response.ok && data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: data.message,
              showConfirmButton: false,
              timer: 1500
            });
            window.location.href = data.redirectUrl;
          } else {
            await Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: data.message || 'An error occurred. Please try again.'
            });
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'An error occurred. Please try again.'
          });
        }
      });

      let resendTimeout = localStorage.getItem('resendTimeout');
      if (resendTimeout) {
        const remainingTime = Math.max(0, resendTimeout - Date.now());
        startResendTimer(remainingTime);
      } else {
        startResendTimer(60000); // Start with 1 minute timeout
      }

      function startResendTimer(remainingTime) {
        const countdown = setInterval(() => {
          const timeLeft = Math.max(0, remainingTime - 1000);
          const secondsLeft = Math.floor(timeLeft / 1000);

          countdownElement.textContent = `Resend available in ${secondsLeft}s`;

          if (secondsLeft <= 0) {
            clearInterval(countdown);
            resendButton.disabled = false;
            resendButton.textContent = "Resend";
            countdownElement.textContent = '';
            localStorage.removeItem('resendTimeout');
          } else {
            remainingTime = timeLeft;
            localStorage.setItem('resendTimeout', Date.now() + remainingTime);
          }
        }, 1000);
      }

      resendButton.addEventListener('click', async () => {
        try {
          resendButton.disabled = true;
          resendButton.textContent = "Resending...";

          const response = await fetch('/auth/resend-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
          });

          const data = await response.json();

          if (response.ok && data.success) {
            await Swal.fire('Success', data.message, 'success');
          } else {
            await Swal.fire('Error', data.message || 'Failed to resend OTP', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire('Error', 'Failed to resend OTP. Please try again.', 'error');
        }

        resendButton.textContent = 'Please wait...';
        const timeOutDuration = 60000; // 1 minute timeout
        localStorage.setItem('resendTimeout', Date.now() + timeOutDuration);
        startResendTimer(timeOutDuration);
      });
    });
  </script>
</body>
</html>

